{"version":3,"sources":["component/Pagination.jsx","component/List.jsx","component/MoviesPage.jsx","component/New.jsx","component/NavBar.jsx","App.js","component/Login.jsx","reportWebVitals.js","Routing.jsx","index.js"],"names":["Pagination","this","props","numberofPage","currentPage","changeCurrentPage","pageNumberArr","i","push","aria-label","className","map","pageNumber","additional","aria-current","onClick","Component","List","genres","groupByGenres","class","cgObj","name","id","MoviesPage","state","movies","currSearchText","limit","cGenres","deleteEntry","filterMovies","filter","movieobj","_id","setState","setCurrentText","e","task","target","value","sortByRating","sortedMovies","sort","movieobjA","movieobjB","dailyRentalRate","sortByStock","trim","numberInStock","changelimit","currLimit","a","fetch","response","json","jsonMovies","jsonGenres","filteredArr","genre","title","toLowerCase","includes","Math","ceil","length","si","eidx","slice","to","type","onChange","placeholder","scope","New","Navbar","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","App","setMovies","array","filtereMovies","movieObj","addMovie","obj","stock","rate","genreObj","Date","now","copyofMovies","resp","console","log","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Home","Profile","Listing","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.438d8739.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Pagination extends Component {\r\n    render() {\r\n        // paginate\r\n        // no of pages\r\n        // 1. we want fun\r\n        //2 . input >-  numberofPage  , currentPage,  changeCurrentPage\r\n        let {numberofPage, currentPage ,changeCurrentPage} = this.props;\r\n        let pageNumberArr = []\r\n        for (let i = 0; i < numberofPage; i++) {\r\n            pageNumberArr.push(i + 1);\r\n\r\n        }\r\n            return (\r\n                <nav aria-label=\"...\" className=\"col-2\" >\r\n                        <ul className=\"pagination \">\r\n                            {\r\n                                pageNumberArr.map((pageNumber) => {\r\n                                    let additional = pageNumber == currentPage ? \"page-item active\" : \"page-item\";\r\n                                    return (\r\n                                        <li className=\"page-item\" aria-current=\"page\">\r\n                                        <li className={additional}\r\n                                            aria-current=\"page\" onClick={() => {changeCurrentPage(pageNumber) }}>\r\n                                            <span className=\"page-link\">{pageNumber}</span>\r\n                                        </li>\r\n                                        </li>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    </nav> \r\n            )\r\n        }\r\n    }\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport default class List extends Component {\r\n    render() {\r\n        // We need input here >-genres\r\n        // 2. fun of >-  groupByGenres\r\n        let {genres , groupByGenres} = this.props;\r\n        return (\r\n            <ul class=\"list-group\">\r\n                     {\r\n                        genres.map((cgObj) => (\r\n                            (<li class=\"list-group-item\" key = {cgObj.id} \r\n                             onClick = {() => {groupByGenres(cgObj.name)}}>\r\n                                 {cgObj.name}</li>)\r\n\r\n                        )) \r\n                     }\r\n                \r\n                 </ul>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { getMovies } from './temp/MoviesService'\r\nimport Pagination from './Pagination'\r\nimport List from './List'\r\nimport {Link} from 'react-router-dom'\r\nexport default class MoviesPage extends Component {\r\n    state = {\r\n      \r\n       // movies : getMovies() ,\r\n        movies : [] ,\r\n        currSearchText : \"\" ,\r\n        limit : 4,\r\n        genres : [{id : 1 , name : \"All Genres\"}],\r\n        currentPage : 1 , \r\n        cGenres : \"All Genres\"        \r\n    }\r\n    deleteEntry = (id) => {\r\n        let filterMovies = this.state.movies.filter((movieobj) =>{\r\n            return movieobj._id != id;\r\n        })\r\n        this.setState({\r\n            movies : filterMovies\r\n        })\r\n    }\r\n    setCurrentText = (e) => {\r\n        let task = e.target.value;\r\n        // filter\r\n        this.setState({\r\n            currSearchText : task,\r\n            \r\n        })\r\n    }\r\n    sortByRating = (e) =>{\r\n        let className = e.target.className;\r\n        let sortedMovies;\r\n        let{movies} = this.state;\r\n        if(className == \"fas fa-sort-up\"){\r\n            sortedMovies = movies.sort((movieobjA , movieobjB) => {\r\n                return movieobjA.dailyRentalRate - movieobjB.dailyRentalRate;\r\n            });\r\n        }else{\r\n            sortedMovies = movies.sort((movieobjA , movieobjB) =>{\r\n                return movieobjB.dailyRentalRate - movieobjA.dailyRentalRate;\r\n            } );\r\n        }\r\n        this.setState({\r\n            movies : sortedMovies\r\n        })\r\n    }\r\n    sortByStock = (e) => {\r\n        let className = e.target.className.trim();\r\n        let sortedMovies;\r\n        let{movies} = this.state;\r\n        if(className == \"fas fa-sort-up\"){\r\n            sortedMovies = movies.sort((movieobjA , movieobjB) => {\r\n                return movieobjA.numberInStock - movieobjB.numberInStock;\r\n\r\n            })\r\n        }else{\r\n            sortedMovies = movies.sort((movieobjA , movieobjB) => {\r\n                return movieobjB.numberInStock - movieobjA.numberInStock;\r\n            });\r\n        }\r\n        this.setState({\r\n            movies : sortedMovies\r\n        })\r\n    }\r\n    changelimit = (e) => {\r\n        let currLimit = e.target.value;\r\n        if(currLimit < 1)\r\n            return;\r\n        this.setState({\r\n            limit : currLimit\r\n        })\r\n\r\n    }\r\n    changeCurrentPage = (pageNumber) => {\r\n        this.setState({\r\n            currentPage : pageNumber\r\n        })\r\n    }\r\n    groupByGenres = (name) => {\r\n        this.setState({\r\n            cGenres : name,\r\n            currSearchText : \"\"\r\n\r\n        })\r\n    }\r\n    async componentDidMount(){\r\n        let response = await fetch(\"https://react-backend101.herokuapp.com/movies\");\r\n        let jsonMovies = await response.json()\r\n        this.setState({\r\n            movies : jsonMovies.movies\r\n        })\r\n        response = await fetch(\"https://react-backend101.herokuapp.com/genres\");\r\n        let jsonGenres = await response.json()\r\n        this.setState({\r\n            genres : [...this.state.genres , ...jsonGenres.genres]   // split \r\n        });\r\n\r\n    }\r\n    render() {\r\n        let { movies , currSearchText , limit , currentPage , genres , cGenres} = this.state;\r\n        // Filter On the based of Genres \r\n        let filteredArr = movies;\r\n        if(cGenres != \"All Genres\"){\r\n            filteredArr = filteredArr.filter((movieobj) => {\r\n                return movieobj.genre.name == cGenres;\r\n            })\r\n        }\r\n        //  Filter On the base of Search Term\r\n        if(currSearchText != \"\"){\r\n            filteredArr = filteredArr.filter((movieobj) => {\r\n                let title = movieobj.title.trim().toLowerCase();\r\n                return title.includes(currSearchText.toLowerCase());\r\n           \r\n\r\n            })\r\n        }\r\n         // paginate\r\n        // no of pages\r\n        let numberofPage = Math.ceil(filteredArr.length / limit);\r\n\r\n         // impliment\r\n        // si >- sartingindx>- (pagenumber - 1) * limit\r\n        // eidx >- endingindx >- si + limit\r\n        let si = (currentPage -1 )*limit;\r\n        let eidx = si + limit;\r\n        filteredArr = filteredArr.slice(si , eidx);\r\n        return (\r\n        \r\n            <div className = \"row\" >     {/* page devided into 12 vertical row \r\n                {/* col-3 means 12 out of 3 part and col-9 means 9 out of 12 part */}\r\n                 <div className=\"col-3\">\r\n                     <List\r\n                     genres ={genres}\r\n                     groupByGenres = {this.groupByGenres}\r\n                     ></List>\r\n                 </div>\r\n                 <div className=\"col-9\">\r\n                     <button className = \"btn btn-primary\">\r\n                         <Link to = \"/new\" className = \"text-light\">New</Link>\r\n                     </button>\r\n                      {/* In bootstrap , seach the table >- and copy the code of table class */}\r\n            \r\n            <input type = \"search\" value = {currSearchText} onChange = {this.setCurrentText}></input>\r\n            <input type = \"number\" className = \"col-1\"\r\n            placeholder = \"no of elements/page\"\r\n            value = {limit}\r\n            onChange = {this.changelimit}>\r\n                \r\n            </input>\r\n                <table className=\"table\">\r\n                <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Title</th>\r\n                  <th scope=\"col\">Genre</th>\r\n                  <th scope=\"col\">Stock\r\n                  <i className = \"fas fa-sort-up\" onClick = {this.sortByStock}></i>\r\n                  <i className = \"fas fa-sort-down\" onClick = {this.sortByStock}></i>\r\n                      </th>\r\n                  <th scope = \"col\">Rating\r\n                  <i className = \"fas fa-sort-up\" onClick = {this.sortByRating}></i>\r\n                  <i className = \"fas fa-sort-down\" onClick = {this.sortByRating}></i>\r\n                    </th>\r\n                </tr>\r\n              </thead>\r\n\r\n                <tbody>\r\n                {filteredArr.map((movieobj) =>{\r\n                    return(<tr scope= \"row\" key = {movieobj._id}>\r\n                        <td>{movieobj.title}</td> \r\n                        <td>{movieobj.genre.name}</td> \r\n                        <td>{movieobj.numberInStock}</td>\r\n                        <td>{movieobj.dailyRentalRate}</td>\r\n                        <td>\r\n                        <button className = \"btn btn-danger text-white\" onClick = {() => {\r\n                            this.deleteEntry(movieobj._id);\r\n                        }}>Delete</button>\r\n                        </td>\r\n                        \r\n                    </tr>)\r\n                    \r\n                })}\r\n              </tbody>\r\n\r\n                </table>\r\n                <Pagination\r\n                numberofPage = {numberofPage} \r\n                currentPage ={currentPage} \r\n                changeCurrentPage = {this.changeCurrentPage}\r\n                ></Pagination>               \r\n                 </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n    }\r\n      \r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport default class New extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* Form */}\r\n                New Component\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nexport default class Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n  \r\n    <Link className=\"navbar-brand\" to = \"/\">Movies</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <div className = \"Navbar-nav\">\r\n        <Link className = \"Nav-Link\" to = \"/login\">Login</Link>\r\n        </div>\r\n    </div>\r\n</nav>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport MoviesPage from './component/MoviesPage';\nimport New from './component/New';\nimport { Switch, Route } from \"react-router-dom\";\nimport NavBar from './component/NavBar';\nimport Login from './component/Login';\nimport React, { Component } from 'react'\n\nexport default class App extends Component {\n  state = {\n    movies: []\n  }\n  setMovies = (array) => {\n    this.setState({\n      movies: array\n    })\n  }\n  deleteEntry = (id) => {\n    let filtereMovies =\n      this.state.movies.filter((movieObj) => {\n        return movieObj._id != id;\n      })\n    this.setState({\n      movies: filtereMovies\n    })\n  }\n  async componentDidMount() {\n    // console.log(2);\n    let resp = await fetch(\"https://react-backend101.herokuapp.com/movies\");\n    let jsonMovies = await resp.json();\n    this.setState({\n      movies: jsonMovies.movies\n    });\n\n  }\n  addMovie = (obj) => {\n\n    let { title, genre, stock, rate } = obj;\n    let genreObj = [{ _id: \"5b21ca3eeb7f6fbccd471818\", name: \"Action\" },\n    { _id: \"5b21ca3eeb7f6fbccd471820\", name: \"Thriller\" },\n    { _id: \"5b21ca3eeb7f6fbccd471814\", name: \"Comedy\" }\n    ];\n    for (let i = 0; i < genreObj.length; i++) {\n      if (genreObj[i].name == genre) {\n        genre = genreObj[i]\n      }\n    }\n    let movieObj = {\n      _id: Date.now(),\n      title,\n      genre,\n      dailyRentalRate: rate,\n      numberInStock: stock\n    }\n\n    let copyofMovies = [...this.state.movies, movieObj];\n    this.setState({\n      movies: copyofMovies\n    })\n\n\n\n  }\n  render() {\n    console.log(\"App\");\n    return (\n      <>\n        <NavBar></NavBar>\n        <Switch>\n          <Route path=\"/new\" render={\n            (props) => {\n              return (<New {...props}\n                addMovie={this.addMovie}\n              ></New>)\n            }\n          }></Route>\n          {/* <Route path=\"/login\" component={Login}></Route> */}\n          <Route path=\"/\" render={(props) => {\n            return (<MoviesPage {...props}\n              deleteEntry={this.deleteEntry}\n              movies={this.state.movies}\n              setMovies={this.setMovies}></MoviesPage>)\n          }}></Route>\n        </Switch>\n      </>\n    )\n  }\n}","import React, { Component } from 'react'\r\n\r\nexport default class Login extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Login\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from 'react'\r\nimport { Route , Switch , Redirect , Link } from 'react-router-dom';\r\nexport default class Routing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Hello Routing\r\n                <Switch>\r\n                    <Route path = \"/home/profile\" component = {Profile}></Route>\r\n                    <Route path = \"/listing\" component = {Listing}></Route>\r\n                    <Redirect from = \"/home\" to = \"/\"></Redirect>\r\n                    <Route path = \"/\" exact component = {Home}></Route>\r\n\r\n                </Switch>\r\n                <ul>\r\n                    <li><Link to = \"/home/profile\">Profile</Link></li>\r\n                    <li><Link to = \"/listing\">Listing</Link></li>\r\n                </ul>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nclass Profile extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Listing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nclass Error extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Routing from './Routing';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  \n  // when you want to run app only , follow this\n     // <App/>\n    // when you want to run app with routing follow this mean wrape this   \n   <BrowserRouter><App /></BrowserRouter> \n\n    // when you want to do routing , comment <App/> and write <Routing></Routing>\n   //<BrowserRouter ><Routing></Routing> </BrowserRouter> \n\n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}